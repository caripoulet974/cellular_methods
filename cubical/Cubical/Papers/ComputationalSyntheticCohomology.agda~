{-

Please do not move this file. Changes should only be made if necessary.

This file contains pointers to the code examples and main results from
the paper:

Computational Synthetic Cohomology Theory in Homotopy Type Theory

-}

-- The "--safe" flag ensures that there are no postulates or unfinished goals
{-# OPTIONS --safe #-}
module Cubical.Papers.ComputationalSyntheticCohomology where

open import Cubical.Data.Nat
open import Cubical.Algebra.AbGroup

-- 1: Introduction

import Cubical.ZCohomology.Groups.S2wedgeS1wedgeS1                as HⁿS²∨S¹∨S¹

-- 2: Background

open import Cubical.Foundations.Prelude                           as Prelude
import Cubical.Homotopy.HSpace                                    as hSpace
import Cubical.Foundations.Pointed.Homogeneous                    as Homogeneous
import Cubical.HITs.Susp                                          as Suspensions
import Cubical.HITs.Pushout                                       as Pushouts
import Cubical.Foundations.Path                                   as Paths

-- 3:  Stuff
import Cubical.Homotopy.EilenbergMacLane.Base                     as EMSpace
import Cubical.Homotopy.EilenbergMacLane.Properties               as EMProps
import Cubical.Homotopy.EilenbergMacLane.WedgeConnectivity        as WC
import Cubical.Homotopy.EilenbergMacLane.GroupStructure           as EMGr
import Cubical.Algebra.AbGroup.TensorProduct                      as Tensor
import Cubical.Homotopy.EilenbergMacLane.CupProductTensor         as Cup⊗
import Cubical.Homotopy.EilenbergMacLane.CupProduct               as Cupₖ
import Cubical.Homotopy.EilenbergMacLane.GradedCommTensor         as CupComm

-- 4: Cohomology
import Cubical.Cohomology.EilenbergMacLane.Base                   as Cohom
import Cubical.Cohomology.EilenbergMacLane.CupProduct             as CohomCup
import Cubical.Cohomology.EilenbergMacLane.MayerVietoris          as MV
import Cubical.Axiom.Choice                                       as Choice
import Cubical.HITs.Wedge                                         as ⋁

-- 5: Computations of cohomology groups and rings
import Cubical.Cohomology.EilenbergMacLane.Groups.Unit            as HⁿUnit
import Cubical.Cohomology.EilenbergMacLane.Groups.Connected       as CohomConnected
import Cubical.Cohomology.EilenbergMacLane.Groups.Sn              as CohomSn
import Cubical.Cohomology.EilenbergMacLane.Groups.Torus           as CohomT²
import Cubical.HITs.Torus                                         as T²
import Cubical.HITs.RPn.Base                                      as RP²
import Cubical.HITs.KleinBottle                                   as K²
-- import Cubical.Cohomology.Groups.KleinBottle                     as HⁿK²
-- import Cubical.ZCohomology.Groups.KleinBottle                     as HⁿK²

-- import Cubical.Cohomology.EilenbergMacLane.RSnings               as CohomRingSn
 
-- import Cubical.ZCohomology.RingStructure.CohomologyRing           as ℤCohomologyRing
-- import Cubical.HITs.S1                                            as S1

-- import Cubical.HITs.Sn                                            as Sn
-- import Cubical.ZCohomology.Groups.Sn                              as HⁿSᵐ
-- import Cubical.ZCohomology.CohomologyRings.S1                     as H*S¹
-- import Cubical.ZCohomology.CohomologyRings.Sn                     as H*Sᵐ
-- open import Cubical.Homotopy.Hopf                                 as HopfFibration
-- import Cubical.ZCohomology.Groups.CP2                             as HⁿℂP²
-- import Cubical.ZCohomology.CohomologyRings.CP2                    as H*ℂP²
-- import Cubical.HITs.Wedge                                         as ⋁
-- import Cubical.ZCohomology.Groups.S2wedgeS4                       as HⁿS²∨S⁴
-- import Cubical.ZCohomology.CohomologyRings.S2wedgeS4              as H*S²∨S⁴
-- import Cubical.Cohomology.EilenbergMacLane.RingStructure          as GCohomologyRing
-- import Cubical.HITs.KleinBottle                                   as 𝕂²

-- import Cubical.ZCohomology.CohomologyRings.KleinBottle            as H*𝕂²
-- import Cubical.ZCohomology.Groups.RP2wedgeS1                      as HⁿℝP²∨S¹
-- import Cubical.ZCohomology.CohomologyRings.RP2wedgeS1             as H*ℝP²∨S¹
-- import Cubical.Cohomology.EilenbergMacLane.Groups.KleinBottle     as ℤ/2-Hⁿ𝕂²
-- open import Cubical.Cohomology.EilenbergMacLane.Rings.KleinBottle as ℤ/2-H*𝕂²
-- import Cubical.Cohomology.EilenbergMacLane.Groups.RP2wedgeS1      as ℤ/2-HⁿℝP²∨S¹
-- import Cubical.Cohomology.EilenbergMacLane.Rings.RP2wedgeS1       as ℤ/2-H*ℝP²∨S¹
--   renaming (RP²∨S¹-CohomologyRing to H*RP²∨S¹≅ℤ/2[X,Y]/<Y³,XY,X²>)


----- 1. INNTRODUCTION -----

----- 2. Background on HoTT/UF and notations -----

-- 2.1 Homotopy Type Theory in Cubical Agda

-- Definition 1. Binary ap
open Prelude renaming (cong₂ to ap²)

-- Definition 2. H-spaces
open hSpace using (HSpace)

-- Definition 3. Homogeneous types
open Homogeneous using (isHomogeneous)

-- Definition 4. Suspension
open Suspensions using (Susp)

-- Definition 5. Pushouts
open Pushouts using (Pushout)

-- Lemma 6. Flip
open Paths using (sym≡flipSquare)

----- 3. Eilenberg-MacLane spaces -----
-- Definition 7.
-- Included for readability: not used explicitly in formalisation.

-- Definition 8. (raw Eilenbreg-MacLane spaces) EM-raw
open EMSpace using (EM-raw)

-- Definition 9. (Eilenbreg-MacLane spaces) EM-raw
open EMSpace using (EM)

-- Proposition 10. Connectivity of K(G,n)
open EMProps using (isConnectedEM)

-- Lemma 11.
open EMProps using (EMFun-EM→ΩEM+1)

--- 3.1 Group Structure
-- Proposition 12. (Wedge connectivity for K(G,n))
open WC.wedgeConEM using (fun ; left ; right)

-- Proposition 13. (unit laws for +ₖ)
open EMGr using (rUnitₖ ; lUnitₖ)
lUnit≡rUnit : ∀ {ℓ} {G : AbGroup ℓ} (n : ℕ)
  → rUnitₖ {G = G} n (EMSpace.0ₖ n) ≡ lUnitₖ {G = G} n (EMSpace.0ₖ n)
lUnit≡rUnit {G = G} zero = AbGroupStr.is-set (snd G) _ _ _ _
lUnit≡rUnit (suc zero) = refl
lUnit≡rUnit (suc (suc n)) = refl

-- Proposition 14. (commutativity of +ₖ)
open EMGr using (commₖ)

-- Proposition 15. (associativity of +ₖ)
open EMGr using (assocₖ)

-- Proposition 16. (ap² on +ₖ)
open EMGr using (cong₂+₁ ; cong₂+₂)

-- Proposition 17. (cancellation laws of +ₖ)
open EMGr using (rCancelₖ ; lCancelₖ)

--- 3.2 K(Gn) vs ΩK(G,n+1)
-- Proposition 18. Commutativity of Ω(K(G,n),x)
open EMProps using (isCommΩEM-base)

-- Proposition 19. (ap -ₖ = path inversion)
open EMGr using (cong-₁ ; cong-₂)

-- Proposition 20. (σ preserves +ₖ) 
open EMProps using (EM→ΩEM+1-hom)

-- Corollary 21. (σ preserves -ₖ)
open EMProps using (EM→ΩEM+1-sym)

-- Theorem. K(G,n) ≃ Ω(K(G,n+1))
open EMProps using (EM≃ΩEM+1)

--- 3.3 The cup product with group coefficients
-- Definition 22. Tensor products of abelian groups
open Tensor using (_⨂_)

-- Proposition 23. Truncation of K(G,n) →* K(H;n+m)
open EMProps using (isOfHLevel↑∙)

-- The general cup product
open Cup⊗ renaming (_⌣ₖ_ to _⌣ₖ⊗_)

-- Proposition 24 (anihilation laws)
open Cup⊗ using (⌣ₖ-0ₖ ; 0ₖ-⌣ₖ)

-- Lemma 25 (Evan's trick)
open Homogeneous using (→∙Homogeneous≡)

-- Propositions 26 and 27 (distributivity of ⌣ₖ)
open Cup⊗.LeftDistributivity using (main)
open Cup⊗.RightDistributivity using (main)

-- Lemma 28
open Cup⊗ using (EM→ΩEM+1-distr₀ₙ ; EM→ΩEM+1-distrₙsuc ; EM→ΩEM+1-distrₙ₀)

-- Proposition 29 (associativity of ⌣ₖ)
open Cup⊗.Assoc using (main)

-- Proposition 30 (graded commutativity of CupComm)
open CupComm using (⌣ₖ-comm)

--- 3.4 The cup product with ring coefficients
-- Proposition 31 (ring structure on ⌣ₖ with ring coefficents)
open Cupₖ using (assoc⌣ₖ ; distrL⌣ₖ ; distrR⌣ₖ ; ⌣ₖ-0ₖ ; 0ₖ-⌣ₖ)

-- Proposition 32 (graded commutativity)
open Cupₖ using (⌣ₖ-comm)

-- Proposition 33 (neutral element)
open Cupₖ using (⌣ₖ-1ₖ ; 1ₖ-⌣ₖ)


----- 4. Cohomology -----
-- Defininition of cohomology groups
open Cohom using (coHomGr)

-- Cup products on cohomology
open CohomCup using (_⌣_)

--- 4.1 Reduced cohomology
-- Definition of reduced cohomology groups
open Cohom using (coHomRedGr)

-- Proposition 34.
open Cohom using (coHom≅coHomRed)

-- Proposition 35.
-- TODO!!

--- 4.2 Eilenberg-Steenrod axioms for cohomology
-- Definition 36. Cofibres
open Pushouts using (cofib)

-- Definition 37. Arbitrary wedges
open ⋁ using (⋁gen)

-- Definition 38. Choice
open Choice using (satAC)

-- Definition 39. Eilenberg-Steenrod axioms. Todo!!

-- Theorem (The mayer-Vietoris sequence)
open MV.MV using ( Ker-i⊂Im-d ; Im-d⊂Ker-i
                 ; Ker-Δ⊂Im-i ; Im-i⊂Ker-Δ
                 ; Ker-d⊂Im-Δ ; Im-Δ⊂Ker-d)

--- 4.4 The Thom isomorphism and the Gysin sequence
-- Theorem (Gysin sequence)
-- TODO! Port from Steenrod branch.

--

-- Proposition 40. Cohom of 1
open HⁿUnit using (H⁰[Unit,G]≅G ; Hⁿ⁺¹[Unit,G]≅0)

-- Lemma 41. Cohom of truncation
-- Todo!

-- Proposition 42. Cohomology of connected types
open CohomConnected using (H⁰conn)

--- 5.1 Speres
-- Proposition 43. H¹(S¹,G)
open CohomSn using (H¹[S¹,G]≅G)

-- Proposition 44. Hⁿ(Sⁿ,G)
open CohomSn using (Hⁿ[Sⁿ,G]≅G)

-- Proposition 45. Hⁿ(Sᵐ,G) , m ≠ n
open CohomSn using (Hⁿ[Sᵐ⁺ⁿ,G]≅0 ; Hᵐ⁺ⁿ[Sⁿ,G]≅0)

-- Proposition 46. H*(Sᵐ,G) 
-- Todo (just transalte from ℤ version)

--- 5.2 The Torus
-- Definition 47. Torus
open T² using (Torus)

-- Proposition 48. Hⁿ(T²,G)
open CohomT² using (H⁰[T²,G]≅G ; H¹[T²,G]≅G×G ; H²[T²,G]≅G ; H³⁺ⁿ[T²,G]≅0)


--- 5.3 The Real Projective Plane and The Klein Bottle
-- Definition 49. Real Projective Plane
open RP² using (RP²)
-- Definition 50. The Klein Bottle
open K² using (KleinBottle)

-- Proposition 51 H¹(RP²,G) ≅ G[2]
-- Todo...

-- Proposition 52 H²(RP²,G) ≅ G/2
-- Todo

-- Proposition 53 Hᵐ(RP²,G) ≅ 0, m ≥ 3
-- Todo

-- Proposition 54. Hᵐ(K²,G)

-- Proposition 55. H*(RP²,\bZ)
-- Todo

-- Defnition 56 -- kill
-- find

-- Proposition 57 Hᵐ(K²,G)
-- Thomas proof

-- Definition 58. Res
-- find

-- Propsoiton 59. Res refl
-- find

-- Lemma 60. ap2-funct ocherence
